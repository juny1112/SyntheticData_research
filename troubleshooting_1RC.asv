clear; clc; close all;

% Driving data 목록 정의
driving_files = {
    %'G:\공유 드라이브\Battery Software Lab\Protocols\Driving Load\55.6Ah_NE (분리열화실험)\udds_unit_time_scaled_current.xlsx',
    %'G:\공유 드라이브\Battery Software Lab\Protocols\Driving Load\55.6Ah_NE (분리열화실험)\us06_unit_time_scaled_current.xlsx',
    'G:\공유 드라이브\Battery Software Lab\Protocols\Driving Load\55.6Ah_NE (분리열화실험)\BSL_CITY1_time_scaled_current.xlsx',
    %'G:\공유 드라이브\Battery Software Lab\Protocols\Driving Load\55.6Ah_NE (분리열화실험)\BSL_HW1_time_scaled_current.xlsx'
};


% loop (input: driving data(t, I) (+ ECM parameters(R, tau)) / output: V_est, V_SD, ECM parameters hat(R, tau), RMSE)
for fileIdx = 1:length(driving_files)
    filename = driving_files{fileIdx};
    data = readtable(filename);

    t_vec = data.Var1; % [sec]
    I_vec = data.Var2; % [Ah]
    X = [0.001 0.001 10]; % [R0[ohm], R1[ohm], tau1[sec]]

    % 1RC 모델 전압 생성
    V_est = RC_model_1(X, t_vec, I_vec); % 초기값 직접 입력
    base_name = sprintf('load%d', fileIdx);
    save([base_name '_data.mat'], 't_vec', 'I_vec', 'V_est');


    % Markov Noise
    original = V_est;
    epsilon_percent_span = 5; % ±[%]
    initial_state = 51;
    sigma = 0.005;
    numseeds = 10; % seed 개수
    noisedata = struct;

    for seed = 1:numseeds
        rng(seed);
        [noisy, ~, ~, ~, ~, ~] = MarkovNoise(original, epsilon_percent_span, initial_state, sigma);
        noisedata.(sprintf('V_SD%d', seed)) = noisy;
    end

    noise_filename = ['noise_' base_name '_seed10.mat'];
    save(noise_filename, '-struct', 'noisedata'); % V_SD1~10 저장
    
    % Fitting
    R0 = 0.001;
    p0  = [0.0008 8];  % [R1; tau1]
    lb = [0 0.1];
    ub = p0*10;

    para_hats = zeros(numseeds, 4);
    RMSE_list = zeros(numseeds, 1);
    MaxIteration = zeros(numseeds, 1);

    %2. Seed별 cost surface + 최적화 경로 시각화
    for seed = 1:numseeds
        V_SD = noisedata.(sprintf('V_SD%d',seed));

        % 2.1 cost surface
        for i = 1:numseeds
            V_SD = noisedata.(sprintf('V_SD%d', i));

            % R0 fitting
            R0_init = 0.0008;        % R0 초기값
            p0_R0   = R0_init;       % fmincon 에 넘길 초기값(스칼라)
            lb_R0   = 0;
            ub_R0   = R0_init * 10;

            % R1 & tau 그리드
            R1_vec = 0.0001:0.0001:0.0030;
            tau1_vec = 1:50;

            % fmincon option
            options_R0 = optimset( ...
                'Display',     'off', ...
                'MaxIter',      5000, ... %R0만 피팅하는거니까 5000번만..
                'MaxFunEvals',  1e6, ...
                'TolFun',       1e-14, ...
                'TolX',         1e-15);

            cost_surface = zeros(length(tau1_vec), length(R1_vec));

            for ii = 1:length(R1_vec)
                for jj = 1:length(tau1_vec)
                    R1 = R1_vec(ii);
                    tau1 = tau1_vec(jj);

                    % “고정된 R1, tau1” 상태에서 R0만 최적화
                    [R0_hat, fval] = fmincon( ...
                        @(p) RMSE_1RC(V_SD, [p, R1, tau1], t_vec, I_vec), ...
                        p0_R0, [],[],[],[], lb_R0, ub_R0, [], options_R0);

                    cost_surface(jj, ii) = fval;

                end
            end
        
            % 2.2 3D surface plot
            [R1_grid, tau1_grid] = meshgrid(R1_vec, tau1_vec);

            figure;
            h = surface(R1_grid, tau1_grid, cost_surface);
            set(h, 'EdgeColor', 'none', 'FaceColor', 'interp');

            view(3);
            xlabel('R1 [\Omega]');
            ylabel('\tau_1 [sec]');
            zlabel('RMSE');
            colorbar;

            shading interp;

            % 2.3 매 이터레이션마다 경로 그려짐
            options = optimset('display','iter', ... % 변경
                'MaxIter',3000, ... % fitting 시간 오래 걸려서..
                'MaxFunEvals',1e6, ...
                'OutputFcn',@plotIter, ... % 경로 그리는 함수
                'TolFun',1e-14, ...
                'TolX',1e-15);

            [para_hat,fval,exitflag,output] = fmincon( ...
                @(p) RMSE_1RC(V_SD, [R0, p], t_vec, I_vec), ...
                p0, [],[],[],[], lb, ub, [], options);
            para_hats(seed, :) = [R0, para_hat, exitflag];

            % 결과 저장
            all_para_hats.(base_name) = para_hats;
            all_rmse.(base_name) = RMSE_list;
            MaxIteration(i) = output.iterations;
        end
    end
end


% RMSE(cost) 함수
function cost = RMSE_1RC(data,para,t,I)
  model = RC_model_1(para, t, I);
  cost  = sqrt(mean((data - model).^2));
end

% plotIter
function stop = plotIter(p,optimValues,state)
  stop = false;
  persistent path3d
  switch state
    case 'init'
      path3d = [];
    case 'iter'
      path3d(end+1,:) = [p(1), p(2), optimValues.fval];
      plot3(path3d(:,1), path3d(:,2), path3d(:,3), '-k','LineWidth',1.5);
      scatter3(p(1),p(2),optimValues.fval,40,'r','filled','MarkerEdgeColor','k');
      drawnow;
    case 'done'
      clear path3d
  end
end

